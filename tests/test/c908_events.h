#ifndef C908_EVENTS_H
#define C908_EVENTS_H

#define NUM_EVENTS 16

enum events {
  L1_ICACHE_ACCESS = 0x1,
  L1_ICACHE_MISS = 0x2,
  STORE_INSTR = 0xB,
  ISSUE_INSTR = 0x16,
  ALU_INSTR = 0x1D,
  VECTOR_SIMD_INSTR = 0x1F,
  CSR_INSTR = 0x20,
  STALLED_CYCLES_FRONTEND = 0x27,
  STALLED_CYCLES_BACKEND = 0x28,
  M_MODE_CYCLES = 0x2B,
  S_MODE_CYCLES = 0x2C,
  U_MODE_CYCLES = 0x2D,
  LOAD_INSTR = 0x30,
  FUSED_INSTR = 0x31,
  MULT_INSTR = 0x32,
  DIV_INSTR = 0x33,
  BRANCH_INSTR = 0x36
};

enum events events_list[] = {
  L1_ICACHE_ACCESS, L1_ICACHE_MISS, STORE_INSTR, ISSUE_INSTR, ALU_INSTR,
  VECTOR_SIMD_INSTR, CSR_INSTR, STALLED_CYCLES_FRONTEND, STALLED_CYCLES_BACKEND,
  M_MODE_CYCLES, S_MODE_CYCLES, U_MODE_CYCLES, LOAD_INSTR, FUSED_INSTR,
  MULT_INSTR, DIV_INSTR, BRANCH_INSTR
};

// Define a struct to hold event data and its counter
struct event_counter {
  enum events event;   // Event type
  const char *name;    // Event name
  int count;           // Counter for occurrences
};

// Initialize an array of event_counter structs
struct event_counter events_counter_list[] = {
  {L1_ICACHE_ACCESS, "L1_ICACHE_ACCESS", 0},
  {L1_ICACHE_MISS, "L1_ICACHE_MISS", 0},
  {STORE_INSTR, "STORE_INSTR", 0},
  {ISSUE_INSTR, "ISSUE_INSTR", 0},
  {ALU_INSTR, "ALU_INSTR", 0},
  {VECTOR_SIMD_INSTR, "VECTOR_SIMD_INSTR", 0},
  {CSR_INSTR, "CSR_INSTR", 0},
  {STALLED_CYCLES_FRONTEND, "STALLED_CYCLES_FRONTEND", 0},
  {STALLED_CYCLES_BACKEND, "STALLED_CYCLES_BACKEND", 0},
  {M_MODE_CYCLES, "M_MODE_CYCLES", 0},
  {S_MODE_CYCLES, "S_MODE_CYCLES", 0},
  {U_MODE_CYCLES, "U_MODE_CYCLES", 0},
  {LOAD_INSTR, "LOAD_INSTR", 0},
  {FUSED_INSTR, "FUSED_INSTR", 0},
  {MULT_INSTR, "MULT_INSTR", 0},
  {DIV_INSTR, "DIV_INSTR", 0},
  {BRANCH_INSTR, "BRANCH_INSTR", 0}
};

#endif //C908_EVENTS_H
